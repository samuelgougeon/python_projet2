import Quoridor
class QuoridorX(Quoridor):
    def __init__(self, joueurs, murs=None):

        #Erreurs de base à soulever
        if not hasattr(joueurs, '__iter__'):
            raise QuoridorError("Ton argument 'joueurs' n'est pas un itérable.")
        if len(joueurs) > 2:
            raise QuoridorError("On ne veut jouer qu'à deux joueurs.")
        
        #Si 'joueurs' est un itérable de strings, créer la liste de dictionnaires
        if isinstance(joueurs[0], str) and isinstance(joueurs[1], str):
            self.joueurs = [
                {'nom': joueurs[0], 'murs': 10, 'pos': (5, 1)},
                {'nom': joueurs[1], 'murs': 10, 'pos': (5, 9)},
            ]
            
        #Si 'joueurs' est un itérable de dictionnaires, les traiter
        if isinstance(joueurs[0], dict) and isinstance(joueurs[1], dict):
            for i in joueurs:
                if not 0 <= joueurs[i]['murs'] <= 10:
                    raise QuoridorError("Le nombre de murs à placer est entre 0 et 10.")
                if not 1 <= joueurs[i]['pos'][0] <= 9 or not 1 <= joueurs[i]['pos'][1] <= 9:
                    raise QuoridorError("La position que tu essaies d'entrer n'est pas valide!")
            self.joueurs = joueurs
            
        #Si les murs n'existent pas encore, créer le dictionnaire
        if murs is None:
            self.murs = {'horizontaux': [], 'verticaux': []}
            
        #Si les murs existent, les traiter
        else:
            if not isinstance(murs, dict):
                raise QuoridorError("Ton argument 'murs' n'est pas un dictionnaire.")
                
            for i in enumerate(murs['horizontaux']):
                if not 1 <= i[1][0] <= 8 or not 2 <= i[1][1] <= 9:
                    raise QuoridorError("Position de mur invalide")
            for i in enumerate(murs['verticaux']):
                if not 2 <= i[1][0] <= 9 or not 1 <= i[1][1] <= 8:
                    raise QuoridorError("Position de mur invalide")
                
            self.murs = murs
        
        #Nombre maximal de murs en circulation
        if self.joueurs[0]['murs'] + self.joueurs[1]['murs'] + len(self.murs['horizontaux']) + len(self.murs['verticaux']) != 20:
            raise QuoridorError("Nombre total de murs invalide (seul nombre autorisé: 20).")
        
        #Les possibilités de mouvement d'un joueur selon l'état du jeu
        self.graphe = construire_graphe(
            [joueur['pos'] for joueur in self.joueurs],
            self.murs['horizontaux'],
            self.murs['verticaux']
            )
        self.afficher()
    def afficher(self):
        import turtle

        
        wn = turtle.Screen()
        wn.setup(464, 564)
        le = turtle.Turtle()
        le.penup()
        le.goto(0, 254)
        le.write('Légende: bleu={}, rouge={}'.format(self.joueurs[0], self.joueurs[1]), True, 'center', font=('Cambria', 14))
        damier = turtle.Turtle()
        damier.shape('square')
        damier.shapesize(2)
        damier.color('grey')
        damier.penup()
        damier.speed(0)
        ho = turtle.Turtle()
        ho.shape('square')
        ho.shapesize(0.3, 4.4)
        ho.color('black')
        ho.penup()
        ho.speed(0)
        ve = turtle.Turtle()
        ve.shape('square')
        ve.shapesize(4.4, 0.3)
        ve.color('black')
        ve.penup()
        ve.speed(0)
        j1 = turtle.Turtle()
        j1.shape('circle')
        j1.color('blue')
        j1.penup()
        j2 = turtle.Turtle()
        j2.shape('circle')
        j2.color('red')
        j2.penup()
        for i in self.murs['horizontaux']:
            ho.goto(i[0]*48 - 216 , i[1]*48 - 264)
            ho.stamp()
        for i in self.murs['verticaux']:
            ve.goto(i[0]*48 - 264 , i[1]*48 - 216)
            ve.stamp() 
        for y in range(9):
            for x in range(9):
                screen_x = -192 + (x*48)
                screen_y = 192 - (y*48)
                damier.goto(screen_x, screen_y)
                damier.stamp()    
        j1.goto((self.joueurs[0]['pos'][0])*48 - 240, (self.joueurs[0]['pos'][1])*48 - 240)
        j2.goto((self.joueurs[1]['pos'][0])*48 - 240, (self.joueurs[1]['pos'][1])*48 - 240)
        wn.mainloop()
              



  